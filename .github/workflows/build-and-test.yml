name: Compile & test

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [master, v1.1.2]

permissions:
  checks: write

env:
  BUILD_TYPE: Release 
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  check-draft:
    name: "Check if PR is draft"
    runs-on: ubuntu-latest
    steps:
      - name: Check draft status
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "This is a draft PR. Skipping build." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "This is not a draft PR. Proceeding with build."
            exit 0
          fi

  build-win: 
    name: "Windows MSVC"
    needs: check-draft
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies (windows)
        run: |
          vcpkg install curl pkgconf cairo libwebp --triplet x64-windows-static
          choco install ninja
          pip install matplotlib numpy scipy pyinstaller
          
      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . -G "Ninja" \
            -DGUI=ON \
            -DBUILD_PLOT_EXE=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DARCH=x86-64 \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="x64-windows-static"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12
  
      - uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            build/lib/*
            build/bin/*

      # - name: Build tests
      #   run: cmake --build build --target tests -j12

      # - name: Run tests
      #   run: ctest --output-on-failure --test-dir build/tests

      # - name: Generate test report
      #   uses: mikepenz/action-junit-report@v4
      #   if: (success() || failure())
      #   with:
      #     check_name: "Windows test report"
      #     report_paths: build/tests/reports/*.xml

  build-mac:
    name: "MacOS universal"
    needs: check-draft
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: | 
          brew install curl
          
      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12  
  
      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binaries
          path: |
            build/lib/*
            build/bin/*

      - name: Build tests
        run: cmake --build build --target tests -j12

      - name: Run tests
        run: ctest --output-on-failure --test-dir build/tests

      - name: Generate test report
        uses: mikepenz/action-junit-report@v4
        if: (success() || failure())
        with:
          check_name: "MacOS test report"
          report_paths: build/tests/reports/*.xml

  build-mac-gui:
    name: "${{ matrix.name }}"
    needs: check-draft
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: 
        include: 
          - runner: macos-13
            name: "MacOS x86"
            arch: x86_64
            vcpkg_triplet: x64-osx
            CC: clang
            CXX: clang++
            # CC: $(brew --prefix llvm@15)/bin/clang
            # CXX: $(brew --prefix llvm@15)/bin/clang++
            XCODE_VER: 15.0.1

          - runner: macos-15
            name: "MacOS arm64"
            arch: arm64
            vcpkg_triplet: arm64-osx
            CC: $(brew --prefix llvm@18)/bin/clang
            CXX: $(brew --prefix llvm@18)/bin/clang++
            XCODE_VER: 16.0

    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Set Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.XCODE_VER }}.app/Contents/Developer

      - name: Install dependencies
        run: |
          brew install cmake curl pkg-config cairo fontconfig bzip2 expat zlib libpng webp

      - name: Build the library
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_C_COMPILER=${{ matrix.CC }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.CXX }} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12
        
      - name: Clean up GUI binary folders for upload
        run: |
          cd build
          echo "Current directory: $(pwd)"
          echo "Contents of current folder: $(ls -la)"
          cd bin
          echo "Current directory: $(pwd)"
          echo "Contents of current folder: $(ls -la)"
          cd scripts
          echo "Current directory: $(pwd)"
          echo "Contents of current folder: $(ls -la)"
          cd ../../..
          find build/bin -type d -name "*.app" ! -name "saxs_fitter_gui.app" ! -name "em_fitter_gui.app" -exec rm -rf {} +
          echo "OK"
          find build/bin/scripts ! -name "plot*" -exec rm -rf {} +
          echo "OK"

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-gui-binaries
          path: |
            build/lib/*
            build/bin/*

  build-ubuntu:
    name: ${{ matrix.name }}
    needs: check-draft
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: "Ubuntu latest with GCC"
            c_compiler: gcc
            cpp_compiler: g++
            arch: x86-64

          - os: ubuntu-22.04
            name: "Ubuntu 22.04 with GCC"
            c_compiler: gcc-10
            cpp_compiler: g++-10
            arch: x86-64

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev libcairo2-dev libgtk-3-dev libwebp-dev
          if [ $BUILD_TYPE == 'Debug' ]; then
            sudo apt-get install libdwarf-dev
          fi
          
      - name: Build the library (ubuntu latest)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Build the GUI executables (${{ matrix.os }})
        if: matrix.os != 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: |
            build/lib/*
            build/bin/*
 
      - name: Build tests
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --target tests -j12

      - name: Run tests
        if: matrix.os == 'ubuntu-latest'
        run: ctest --output-on-failure --test-dir build/tests

      - name: Generate test report
        uses: mikepenz/action-junit-report@v4
        if: matrix.os == 'ubuntu-latest' && (success() || failure())
        with:
          check_name: "Ubuntu test report"
          report_paths: build/tests/reports/*.xml