name: Compile & test

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [master]

permissions:
  checks: write
  packages: write

env:
  BUILD_TYPE: Release

jobs:
  check-draft:
    name: "Check if PR is draft"
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.check.outputs.is-draft }}
    steps:
      - name: Check draft status
        id: check
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "This is a draft PR. Skipping build." >> $GITHUB_STEP_SUMMARY
            echo "is-draft=true" >> $GITHUB_OUTPUT
          else
            echo "This is not a draft PR. Proceeding with build."
            echo "is-draft=false" >> $GITHUB_OUTPUT
          fi

  check-headers:
    name: "Check that all file headers include a license and author"
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check headers
        run: python .github/check_headers.py

  build-win: 
    name: "Windows MSVC"
    needs: check-headers
    runs-on: windows-latest
    env:
      USERNAME: AUSAXS
      FEED_URL: https://nuget.pkg.github.com/AUSAXS/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/AUSAXS/index.json,readwrite"
      VCPKG_ROOT: ""

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/setup-python@v5

      - name: Set up vcpkg nuget caching
        shell: pwsh
        run: |
          .$(vcpkg fetch nuget) `
            sources add `
            -Source "${{ env.FEED_URL }}" `
            -StorePasswordInClearText `
            -Name GitHubPackages `
            -UserName "${{ env.USERNAME }}" `
            -Password "${{ secrets.PACKAGEACCESS }}"
          .$(vcpkg fetch nuget) `
          setapikey "${{ secrets.PACKAGEACCESS }}" `
          -Source "${{ env.FEED_URL }}"

      - name: Install dependencies
        run: |
          vcpkg install curl pkgconf cairo libwebp --triplet x64-windows-static --debug
          choco install ninja
          pip install matplotlib numpy scipy pyinstaller

      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . -G "Ninja" \
            -DGUI=ON \
            -DBUILD_PLOT_EXE=OFF \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DARCH=x86-64 \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="x64-windows-static"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            build/lib/*
            build/bin/*

  build-mac:
    name: "MacOS universal"
    needs: check-headers
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: | 
          brew install --quiet curl

      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12  
  
      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binaries
          path: |
            build/lib/*
            build/bin/*

      - name: Build tests
        run: cmake --build build --target tests -j12

      - name: Run tests
        run: ctest --output-on-failure --parallel 6 --repeat until-pass:3 --test-dir build/tests

      - name: Generate test report
        uses: mikepenz/action-junit-report@v4
        if: (success() || failure())
        with:
          check_name: "MacOS test report"
          report_paths: build/tests/reports/*.xml

  build-mac-gui:
    name: "${{ matrix.name }}"
    needs: check-headers
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: 
        include: 
          - runner: macos-13
            name: "MacOS x86"
            arch: x86_64
            vcpkg_triplet: x64-osx
            CC: clang
            CXX: clang++
            # CC: $(brew --prefix llvm@15)/bin/clang
            # CXX: $(brew --prefix llvm@15)/bin/clang++
            XCODE_VER: 15.0.1

          - runner: macos-14
            name: "MacOS arm64"
            arch: arm64
            vcpkg_triplet: arm64-osx
            CC: clang
            CXX: clang++
            # CC: $(brew --prefix llvm@18)/bin/clang
            # CXX: $(brew --prefix llvm@18)/bin/clang++
            XCODE_VER: 15.0.1
    env:
      USERNAME: AUSAXS
      FEED_URL: https://nuget.pkg.github.com/AUSAXS/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/AUSAXS/index.json,readwrite"

    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest            
      - uses: lukka/run-vcpkg@v11
        id: vcpkg
        with:
          vcpkgGitCommitId: 4334d8b4c8916018600212ab4dd4bbdc343065d1

      - name: Set Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.XCODE_VER }}.app/Contents/Developer

      - name: Set up vcpkg nuget caching (arm64)
        if: matrix.arch == 'arm64'
        run: |
          nuget=$("${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg" fetch nuget | tail -n 1)
          "$nuget" sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.PACKAGEACCESS }}"
          "$nuget" setapikey "${{ secrets.PACKAGEACCESS }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Set up vcpkg nuget caching (x86_64)
        if: matrix.arch == 'x86_64'
        run: |
          nuget=$("${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg" fetch nuget | tail -n 1)
          mono "$nuget" sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.PACKAGEACCESS }}"
          mono "$nuget" setapikey "${{ secrets.PACKAGEACCESS }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Install dependencies
        run: |
          brew install autoconf autoconf-archive automake libtool
          vcpkg install curl pkgconf cairo libwebp --triplet ${{ matrix.vcpkg_triplet }} --debug

      - name: Build the library
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_C_COMPILER=${{ matrix.CC }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.CXX }} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE="${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.vcpkg_triplet }}" \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Clean up GUI binary folders for upload
        run: |
          find build/bin -type d -name "*.app" ! -name "saxs_fitter_gui.app" ! -name "em_fitter_gui.app" -exec rm -rf {} +
          find build/bin/scripts ! -name "plot*" -exec rm -rf {} +

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-gui-binaries
          path: |
            build/lib/*
            build/bin/*

  build-ubuntu:
    name: ${{ matrix.name }}
    needs: check-headers
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: "Ubuntu latest with GCC"
            c_compiler: gcc
            cpp_compiler: g++
            arch: x86-64

          - os: ubuntu-22.04
            name: "Ubuntu 22.04 with GCC"
            c_compiler: gcc-10
            cpp_compiler: g++-10
            arch: x86-64

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev libcairo2-dev libgtk-3-dev libwebp-dev
          if [ $BUILD_TYPE == 'Debug' ]; then
            sudo apt-get install libdwarf-dev
          fi
          
      - name: Build the library (ubuntu latest)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Build the GUI executables (${{ matrix.os }})
        if: matrix.os != 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: |
            build/lib/*
            build/bin/*
 
      - name: Build tests
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --target tests -j12

      - name: Run tests
        if: matrix.os == 'ubuntu-latest'
        run: ctest --output-on-failure --parallel 6 --repeat until-pass:3 --test-dir build/tests

      - name: Generate test report
        uses: mikepenz/action-junit-report@v4
        if: matrix.os == 'ubuntu-latest' && (success() || failure())
        with:
          check_name: "Ubuntu test report"
          report_paths: build/tests/reports/*.xml