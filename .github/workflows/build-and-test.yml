name: Compile & test

on:
  - workflow_dispatch

permissions:
  checks: write

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-latest
          #   name: "Ubuntu latest with gcc"
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   arch: x86-64

          - os: ubuntu-20.04
            name: "Ubuntu 20.04 with gcc"
            c_compiler: gcc-10
            cpp_compiler: g++-10
            arch: x86-64

          # - os: windows-latest
          #   name: "Windows latest with msvc"
          #   c_compiler: cl
          #   cpp_compiler: cl
          #   arch: x86-64

          # - os: macos-latest
          #   name: "MacOS x86_64 latest with clang"
          #   c_compiler: $(brew --prefix llvm@15)/bin/clang
          #   cpp_compiler: $(brew --prefix llvm@15)/bin/clang++
          #   arch: native

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install curl (ubuntu)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev

      - name: Install curl (macos)
        if: matrix.os == 'macos-latest'
        run: brew install curl-openssl

      - name: Install curl (windows)
        if: matrix.os == 'windows-latest'
        run: vcpkg install curl:x64-windows-static

      - name: Get number of cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Install libdwarf for debug build
        if: (matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest') && env.BUILD_TYPE == 'Debug'
        run: |
          if [ ${{ matrix.os }} == 'macos-latest' ]; then
            brew install libdwarf
          elif [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            sudo apt-get install libdwarf-dev
          fi

      - name: Build the library (windows, vcpkg)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir build
          cmake -DGUI=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DARCH=${{ matrix.arch }} -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="x64-windows-static" -S . -B build 
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j ${{ steps.cpu-cores.outputs.cpu-cores }}

      - name: Build the library (ubuntu)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-20.04'
        shell: bash
        run: |
          mkdir build
          cmake -DGUI=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DARCH=${{ matrix.arch }} -S . -B build 
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j ${{ steps.cpu-cores.outputs.cpu-cores }}

      - name: Build the library (mac)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          mkdir build
          cmake -DGUI=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -S . -B build
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j ${{ steps.cpu-cores.outputs.cpu-cores }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: |
            build/lib/*
            build/bin/*
      
      - name: Build tests (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --target tests -j ${{ steps.cpu-cores.outputs.cpu-cores }}

      - name: Run tests (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: ctest --output-on-failure --test-dir build/test

      - name: Generate test report (ubuntu)
        uses: mikepenz/action-junit-report@v4
        if: matrix.os == 'ubuntu-latest' && (success() || failure())
        with:
          report_paths: build/test/reports/*.xml

  test-shared-lib:
    name: Test shared library
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: 
        os: [macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: build

      - name: Get Python packages
        run: pip3 install numpy

      - name: Test shared library through ctypes
        run: python3 test/test_shared_lib.py ${PWD}/build