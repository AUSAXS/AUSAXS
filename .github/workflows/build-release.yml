name: Build & sign release binaries

on:
  workflow_dispatch:

permissions:
  checks: write

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  # build-win: 
  #   name: "Windows MSVC"
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'
  #     - uses: actions/github-script@v7
  #       with:
  #         script: |
  #           core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
  #           core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

  #     - name: Install dependencies (windows)
  #       run: |
  #         vcpkg install curl pkgconf cairo libwebp --triplet x64-windows-static
  #         choco install ninja
  #         pip install matplotlib numpy scipy pyinstaller

  #     - name: Build the library
  #       shell: bash
  #       run: |
  #         mkdir build
  #         cmake -B build -S . -G "Ninja" \
  #           -DGUI=ON \
  #           -DBUILD_PLOT_EXE=ON \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DCMAKE_C_COMPILER=cl \
  #           -DCMAKE_CXX_COMPILER=cl \
  #           -DARCH=x86-64 \
  #           -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" \
  #           -DVCPKG_TARGET_TRIPLET="x64-windows-static"
  #         cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-binaries
  #         path: |
  #           build/lib/*
  #           build/bin/*

  # build-mac:
  #   name: "MacOS universal"
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install dependencies
  #       run: | 
  #         brew install --quiet curl

  #     - name: Build the library
  #       shell: bash
  #       run: |
  #         mkdir build
  #         cmake -B build -S . \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
  #         cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12  

  #     - name: Sign the artifacts
  #       env: 
  #         CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
  #         CERTIFICATE_PWD: ${{ secrets.MACOS_P12_PASSWORD }}
  #         KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
  #         DEV_ID: ${{ secrets.MACOS_DEV_ID }}
  #       run: |
  #         CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
  #         KEYCHAIN_PATH=$RUNNER_TEMP/keychain

  #         echo -n $CERTIFICATE_BASE64 | base64 --decode -o $CERTIFICATE_PATH

  #         security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH
  #         security default-keychain -s $KEYCHAIN_PATH
  #         security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH

  #         security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P $CERTIFICATE_PWD -T /usr/bin/codesign
  #         security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PWD $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         codesign --deep --verify --force --verbose --options runtime --timestamp --sign "$DEV_ID" build/bin/saxs_fitter build/bin/em_fitter
    
  #     - name: Notarize saxs_fitter
  #       uses: lando/notarize-action@v2
  #       with: 
  #         product-path: build/bin/saxs_fitter
  #         primary-bundle-id: "com.ausaxs.saxs_fitter"
  #         appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
  #         appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
  #         appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
  #         verbose: true

  #     - name: Notarize em_fitter
  #       uses: lando/notarize-action@v2
  #       with: 
  #         product-path: build/bin/em_fitter
  #         primary-bundle-id: "com.ausaxs.em_fitter"
  #         appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
  #         appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
  #         appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
  #         verbose: true

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-universal-binaries
  #         path: |
  #           build/lib/*
  #           build/bin/*

  build-mac-gui:
    name: "${{ matrix.name }}"
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: 
        include: 
          # - runner: macos-13
          #   name: "MacOS x86"
          #   arch: x86_64
          #   vcpkg_triplet: x64-osx
          #   CC: clang
          #   CXX: clang++
          #   XCODE_VER: 15.0.1

          - runner: macos-15
            name: "MacOS arm64"
            arch: arm64
            vcpkg_triplet: arm64-osx
            CC: $(brew --prefix llvm@18)/bin/clang
            CXX: $(brew --prefix llvm@18)/bin/clang++
            XCODE_VER: 15.4

    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Set Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.XCODE_VER }}.app/Contents/Developer

      - name: Install dependencies
        run: |
          brew install --quiet cmake curl pkg-config cairo fontconfig bzip2 expat zlib libpng webp

      - name: Build the library
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_C_COMPILER=${{ matrix.CC }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.CXX }} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Clean up GUI binary folders for upload
        run: |
          find build/bin -type d -name "*.app" ! -name "saxs_fitter_gui.app" ! -name "em_fitter_gui.app" -exec rm -rf {} +
          find build/bin/scripts ! -name "plot*" -exec rm -rf {} +

      - name: Sign the artifacts
        env: 
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PWD: ${{ secrets.MACOS_P12_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          DEV_ID: ${{ secrets.MACOS_DEV_ID }}
        run: |
            CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
            KEYCHAIN_PATH=$RUNNER_TEMP/keychain

            echo -n $CERTIFICATE_BASE64 | base64 --decode -o $CERTIFICATE_PATH

            security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH
            security default-keychain -s $KEYCHAIN_PATH
            security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH

            security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P $CERTIFICATE_PWD -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PWD $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            codesign --deep --verify --force --verbose --options runtime --timestamp --sign "$DEV_ID" build/bin/saxs_fitter build/bin/em_fitter build/bin/saxs_fitter_gui.app build/bin/em_fitter_gui.app

      - name: Notarize saxs_fitter_gui
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/saxs_fitter_gui.app
          primary-bundle-id: "com.ausaxs.saxs_fitter_gui"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      - name: Notarize em_fitter_gui
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/em_fitter_gui.app
          primary-bundle-id: "com.ausaxs.em_fitter_gui"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      - name: Staple the notarization ticket
        run: |
          xcrun stapler staple build/bin/saxs_fitter_gui.app
          xcrun stapler staple build/bin/em_fitter_gui.app
          codesign -dv --verbose=4 build/bin/saxs_fitter_gui.app build/bin/em_fitter_gui.app
          spctl -a -vv build/bin/saxs_fitter_gui.app
          spctl -a -vv build/bin/em_fitter_gui.app

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-gui-binaries
          path: |
            build/lib/*
            build/bin/*

  # build-ubuntu:
  #   name: ${{ matrix.name }}
  #   runs-on: ${{ matrix.os }}
  #   strategy: 
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           name: "Ubuntu latest with GCC"
  #           c_compiler: gcc
  #           cpp_compiler: g++
  #           arch: x86-64

  #         - os: ubuntu-22.04
  #           name: "Ubuntu 22.04 with GCC"
  #           c_compiler: gcc-10
  #           cpp_compiler: g++-10
  #           arch: x86-64

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install libcurl4-openssl-dev libcairo2-dev libgtk-3-dev libwebp-dev
  #         if [ $BUILD_TYPE == 'Debug' ]; then
  #           sudo apt-get install libdwarf-dev
  #         fi

  #     - name: Build the library (ubuntu latest)
  #       if: matrix.os == 'ubuntu-latest'
  #       shell: bash
  #       run: |
  #         mkdir build
  #         cmake -B build -S . \
  #           -DGUI=ON \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
  #           -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
  #           -DARCH=${{ matrix.arch }}
  #         cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

  #     - name: Build the GUI executables (${{ matrix.os }})
  #       if: matrix.os != 'ubuntu-latest'
  #       shell: bash
  #       run: |
  #         mkdir build
  #         cmake -B build -S . \
  #           -DGUI=ON \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
  #           -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
  #           -DARCH=${{ matrix.arch }}
  #         cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.os }}-binaries
  #         path: |
  #           build/lib/*
  #           build/bin/*