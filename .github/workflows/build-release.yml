name: Build & sign release binaries

on:
  workflow_dispatch:

permissions:
  checks: write

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: "Check that version number has been incremented"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check build version
        run: |
          # file: include/core/constants/Version.h
          VERSION_FILE="include/core/constants/Version.h"
          VERSION_LINE=$(grep 'inline constexpr char version[]' $VERSION_FILE)
          VERSION_IN_FILE=$(echo $VERSION_LINE | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Version in file: $VERSION_IN_FILE"

          # get the latest tag from git
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest git tag: $LATEST_TAG"
          if [ "$VERSION_IN_FILE" == "$LATEST_TAG" ]; then
            echo "Version number has not been incremented since the last tag."
            echo "Please update the version number in $VERSION_FILE."
            exit 1
          else
            echo "Version number has been incremented."
          fi

  build-win: 
    name: "Windows MSVC"
    needs: check-version
    runs-on: windows-latest
    env:
      USERNAME: AUSAXS
      FEED_URL: https://nuget.pkg.github.com/AUSAXS/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/AUSAXS/index.json,readwrite"

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up vcpkg nuget caching
        shell: pwsh
        run: |
          .$(vcpkg fetch nuget) `
            sources add `
            -Source "${{ env.FEED_URL }}" `
            -StorePasswordInClearText `
            -Name GitHubPackages `
            -UserName "${{ env.USERNAME }}" `
            -Password "${{ secrets.PACKAGEACCESS }}"
          .$(vcpkg fetch nuget) `
          setapikey "${{ secrets.PACKAGEACCESS }}" `
          -Source "${{ env.FEED_URL }}"

      - name: Install dependencies
        run: |
          vcpkg install curl pkgconf cairo libwebp --triplet x64-windows-static
          choco install ninja
          pip install matplotlib numpy scipy pyinstaller

      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . -G "Ninja" \
            -DGUI=ON \
            -DBUILD_PLOT_EXE=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DARCH=x86-64 \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="x64-windows-static"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Configure output folders for upload
        shell: bash
        run: |
          rm -rf build/lib/*.exp build/lib/*.lib
          rm -rf build/bin/resources

      - uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            build/lib/*
            build/bin/*

  build-mac:
    name: "MacOS universal"
    needs: check-version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: | 
          brew install --quiet curl

      - name: Build the library
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12  

      - name: Sign the artifacts
        env: 
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PWD: ${{ secrets.MACOS_P12_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          DEV_ID: ${{ secrets.MACOS_DEV_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/keychain

          echo -n $CERTIFICATE_BASE64 | base64 --decode -o $CERTIFICATE_PATH

          security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P $CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PWD $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          codesign --deep --verify --force --verbose --options runtime --timestamp --sign "$DEV_ID" build/bin/saxs_fitter build/bin/em_fitter
    
      - name: Notarize saxs_fitter
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/saxs_fitter
          primary-bundle-id: "com.ausaxs.saxs_fitter"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      - name: Notarize em_fitter
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/em_fitter
          primary-bundle-id: "com.ausaxs.em_fitter"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      - name: Configure output folders for upload
        shell: bash
        run: |
          rm -rf build/lib/*.a

      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binaries
          path: |
            build/lib/*
            build/bin/*

  build-mac-gui:
    name: "${{ matrix.name }}"
    needs: check-version
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: 
        include: 
          - runner: macos-13
            name: "MacOS x86"
            arch: x86_64
            vcpkg_triplet: x64-osx
            CC: clang
            CXX: clang++
            XCODE_VER: 15.0.1

          - runner: macos-14
            name: "MacOS arm64"
            arch: arm64
            vcpkg_triplet: arm64-osx
            CC: clang
            CXX: clang++
            XCODE_VER: 15.0.1
    env:
      USERNAME: AUSAXS
      FEED_URL: https://nuget.pkg.github.com/AUSAXS/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/AUSAXS/index.json,readwrite"

    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest            
      - uses: lukka/run-vcpkg@v11
        id: vcpkg
        with:
          vcpkgGitCommitId: 4334d8b4c8916018600212ab4dd4bbdc343065d1

      - name: Set Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.XCODE_VER }}.app/Contents/Developer

      - name: Set up vcpkg nuget caching (arm64)
        if: matrix.arch == 'arm64'
        run: |
          nuget=$("${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg" fetch nuget | tail -n 1)
          "$nuget" sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.PACKAGEACCESS }}"
          "$nuget" setapikey "${{ secrets.PACKAGEACCESS }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Set up vcpkg nuget caching (x86_64)
        if: matrix.arch == 'x86_64'
        run: |
          nuget=$("${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg" fetch nuget | tail -n 1)
          mono "$nuget" sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.PACKAGEACCESS }}"
          mono "$nuget" setapikey "${{ secrets.PACKAGEACCESS }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Install dependencies
        run: |
          brew install autoconf autoconf-archive automake libtool
          vcpkg install curl pkgconf cairo libwebp --triplet ${{ matrix.vcpkg_triplet }}

      - name: Build the library
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_C_COMPILER=${{ matrix.CC }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.CXX }} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE="${{ steps.vcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.vcpkg_triplet }}" \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}"
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Clean up GUI binary folders for upload
        run: |
          find build/bin -type d -name "*.app" ! -name "saxs_fitter_gui.app" ! -name "em_fitter_gui.app" -exec rm -rf {} +
          rm -rf build/lib/*.a
          mv build/bin/saxs_fitter_gui.app/contents/MacOS/saxs_fitter_gui build/bin/saxs_fitter_gui
          mv build/bin/em_fitter_gui.app/contents/MacOS/em_fitter_gui build/bin/em_fitter_gui
          rm -rf build/bin/saxs_fitter_gui.app
          rm -rf build/bin/em_fitter_gui.app

      - name: Sign the artifacts
        env: 
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PWD: ${{ secrets.MACOS_P12_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          DEV_ID: ${{ secrets.MACOS_DEV_ID }}
        run: |
            CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
            KEYCHAIN_PATH=$RUNNER_TEMP/keychain

            echo -n $CERTIFICATE_BASE64 | base64 --decode -o $CERTIFICATE_PATH

            security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH
            security default-keychain -s $KEYCHAIN_PATH
            security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_PATH

            security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P $CERTIFICATE_PWD -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PWD $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            codesign --deep --verify --force --verbose --options runtime --timestamp --sign "$DEV_ID" build/bin/saxs_fitter build/bin/em_fitter build/bin/saxs_fitter_gui build/bin/em_fitter_gui

      - name: Notarize saxs_fitter_gui
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/saxs_fitter_gui
          primary-bundle-id: "com.ausaxs.saxs_fitter_gui"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      - name: Notarize em_fitter_gui
        uses: lando/notarize-action@v2
        with: 
          product-path: build/bin/em_fitter_gui
          primary-bundle-id: "com.ausaxs.em_fitter_gui"
          appstore-connect-username: ${{ secrets.MACOS_APP_USR }}
          appstore-connect-password: ${{ secrets.MACOS_APP_PWD }}
          appstore-connect-team-id: ${{ secrets.MACOS_APP_TEAM_ID }}
          verbose: true

      # - name: Staple the notarization ticket
      #   run: |
      #     xcrun stapler staple build/bin/saxs_fitter_gui.app
      #     xcrun stapler staple build/bin/em_fitter_gui.app
      #     codesign -dv --verbose=4 build/bin/saxs_fitter_gui.app build/bin/em_fitter_gui.app
      #     spctl -a -vv build/bin/saxs_fitter_gui.app
      #     spctl -a -vv build/bin/em_fitter_gui.app

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-gui-binaries
          path: |
            build/lib/*
            build/bin/*

  build-ubuntu:
    name: ${{ matrix.name }}
    needs: check-version
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: "Ubuntu latest with GCC"
            c_compiler: gcc
            cpp_compiler: g++
            arch: x86-64

          - os: ubuntu-22.04
            name: "Ubuntu 22.04 with GCC"
            c_compiler: gcc-10
            cpp_compiler: g++-10
            arch: x86-64

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev libcairo2-dev libgtk-3-dev libwebp-dev
          if [ $BUILD_TYPE == 'Debug' ]; then
            sudo apt-get install libdwarf-dev
          fi

      - name: Build the library (ubuntu latest)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer saxs_fitter_gui em_fitter_gui -j12

      - name: Build the GUI executables (${{ matrix.os }})
        if: matrix.os != 'ubuntu-latest'
        shell: bash
        run: |
          mkdir build
          cmake -B build -S . \
            -DGUI=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DARCH=${{ matrix.arch }}
          cmake --build build --config $BUILD_TYPE --target ausaxs saxs_fitter em_fitter rigidbody_optimizer -j12

      - name: Configure output folders for upload
        shell: bash
        run: |
          rm -rf build/bin/resources
          rm -rf build/lib/*.a

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries
          path: |
            build/lib/*
            build/bin/*